class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res=new ArrayList<>();
        if(candidates.length==0)return res;
        for(int i=0;i<candidates.length;i++){
            if(candidates[i]==target){
                List<Integer> tmp=new ArrayList<>();
                tmp.add(target);
                res.add(tmp);
            }
            else if(candidates[i]<target){
                List<Integer> tmp=new ArrayList<>();
                tmp.add(candidates[i]);
                dfs(candidates,i,target-candidates[i],tmp,res);
            }
        }
        return res;
    }
    public void dfs(int[] candidates,int a,int target,List<Integer> tmp,List<List<Integer>> res){
        for(int i=a;i<candidates.length;i++){
            if(candidates[i]==target){
                List<Integer> tt=new ArrayList<>(tmp);
                tt.add(target);
                res.add(tt); 
            }else if(candidates[i]<target){
                List<Integer> tt=new ArrayList<>(tmp);
                tt.add(candidates[i]);
                dfs(candidates,i,target-candidates[i],tt,res);
            }
        }
    }
} 
