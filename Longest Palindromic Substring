优化算法：
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.size()<2)return s;
        string T;
        for(int i=0;i<s.size();i++){
            T+="#"+s.substr(i,1);
        }
        T.push_back('#');
        vector<int> P(T.size(),0);
        int center=0,boundary=0,maxlen=0,rescenter=0;
        for(int i=1;i<T.size()-1;i++){
            int imirror=2*center-i;
            P[i]=(boundary>i)?min(boundary-i,P[imirror]):0;
            while(i-1-P[i]>=0&&i+1+P[i]<=T.size()-1&&T[i+1+P[i]]==T[i-1-P[i]]){
                P[i]++;
            }
            if(i+P[i]>boundary){
                center=i;
                boundary=i+P[i];
            }
            if(P[i]>maxlen){
                maxlen=P[i];
                rescenter=i;
            }
        }
        return s.substr((rescenter-maxlen)/2,maxlen);
    }
};
dp:
class Solution {
    public String longestPalindrome(String s) {
        if(s.length()==0)return "";
        int[][] dp=new int[s.length()][s.length()];
        int cur=1;
        String res=s.substring(0,1);
        for(int i=0;i<s.length();i++){
            dp[i][i]=1;
        }
        for(int i=1;i<s.length();i++){
            for(int j=0;j<i;j++){
                if(j==i-1){
                   if(s.charAt(i)==s.charAt(j)){
                       dp[j][i]=1;
                        if((i-j+1)>cur){
                            cur=i-j+1;
                            res=s.substring(j,i+1);
                        }
                   }  
                }else if(s.charAt(i)==s.charAt(j)&&dp[j+1][i-1]==1){
                    dp[j][i]=1;
                    if((i-j+1)>cur){
                        cur=i-j+1;
                        res=s.substring(j,i+1);
                    }
                }
            }
            
        }
        return res;
        
    }
}
